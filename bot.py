import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
import requests
from bs4 import BeautifulSoup
import asyncio

logging.basicConfig(level=logging.INFO)

API_TOKEN = '7765583170:AAFTkKyFkr49khxXhW7w8dgS-VdWjTMbbz0'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

CHAT_ID = None

# –°—Ç–∞—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è 
schedule_numerator = {
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": ["–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π(–ü–∞—Ä–∞–º–æ–Ω–æ–≤–∞)", "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π(–ü–æ–¥–ª–µ—Å–Ω—ã–π)", "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏(–ö–∏—Ü—ã–Ω–∞)"],
    "–í—Ç–æ—Ä–Ω–∏–∫": ["–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏(–ö–∏—Ü—ã–Ω–∞)", "–°–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ(–ß–µ—Ä–Ω—ã—à–µ–≤)", "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π(–û—Å–∏–ø—è–Ω)", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–∞—â–∏—Ç—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö(–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∏–π)"],
    "–ß–µ—Ç–≤–µ—Ä–≥": ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —Ç–µ—Ö. –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤–µ–¥–µ–Ω–∏–µ(–ö–∞–º–∏–Ω—å—Å–∫–∏)", "–°–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ(–ß–µ—Ä–Ω—ã—à–µ–≤)", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü–û(–Æ—à–∏–Ω–∞)", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è(–í–æ–ª–∫–æ–≤)"],
    "–ü—è—Ç–Ω–∏—Ü–∞": ["–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞(–ê–Ω–¥—Ä—é–∫–æ–≤)", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —Ç–µ—Ö. –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤–µ–¥–µ–Ω–∏–µ(–û—Å–∏–ø—è–Ω)", "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π(–ù–∏–∫–æ–Ω–æ–≤–∞)"],
    "–°—É–±–±–æ—Ç–∞": ["–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π(–ù–∏–∫–æ–Ω–æ–≤–∞)", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–∞—â–∏—Ç—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö(–ü–µ—Ä–µ–≤–∞–ª–æ–≤)", "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏(–î—ã–º—Å–∫–∞—è, –ê—Ñ–∞–Ω–∞—Å—å–µ–≤–∞)", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è(–í–æ–ª–∫–æ–≤)"]
}

schedule_denominator = {
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": ["–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π(–ü–∞—Ä–∞–º–æ–Ω–æ–≤–∞)", "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π(–ü–æ–¥–ª–µ—Å–Ω—ã–π)", "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏(–ö–∏—Ü—ã–Ω–∞)"],
    "–í—Ç–æ—Ä–Ω–∏–∫": ["–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π(–ü–∞—Ä–∞–º–æ–Ω–æ–≤–∞)", "–°–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ(–ß–µ—Ä–Ω—ã—à–µ–≤)", "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π(–û—Å–∏–ø—è–Ω)", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–∞—â–∏—Ç—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö(–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∏–π)"],
    "–ß–µ—Ç–≤–µ—Ä–≥": ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —Ç–µ—Ö. –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤–µ–¥–µ–Ω–∏–µ(–ö–∞–º–∏–Ω—å—Å–∫–∏)", "–°–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ(–ß–µ—Ä–Ω—ã—à–µ–≤)", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü–û(–Æ—à–∏–Ω–∞)", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è(–í–æ–ª–∫–æ–≤)"],
    "–ü—è—Ç–Ω–∏—Ü–∞": ["–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞(–ê–Ω–¥—Ä—é–∫–æ–≤)", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —Ç–µ—Ö. –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤–µ–¥–µ–Ω–∏–µ(–û—Å–∏–ø—è–Ω)", "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π(–ù–∏–∫–æ–Ω–æ–≤–∞)"],
    "–°—É–±–±–æ—Ç–∞": ["–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π(–ù–∏–∫–æ–Ω–æ–≤–∞)", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–∞—â–∏—Ç—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö(–ü–µ—Ä–µ–≤–∞–ª–æ–≤)", "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏(–î—ã–º—Å–∫–∞—è, –ê—Ñ–∞–Ω–∞—Å—å–µ–≤–∞)", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü–û(–Æ—à–∏–Ω–∞)"]
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (—á–∏—Å–ª–∏—Ç–µ–ª—å/–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å)
def get_current_week():
    url = 'https://mpt.ru/raspisanie/'
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    week_info = soup.find('div', class_='col-xs-12 col-sm-12 col-md-12').text.strip()  # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–µ–ª–µ
    if "—á–∏—Å–ª–∏—Ç–µ–ª—å" in week_info.lower():
        return "—á–∏—Å–ª–∏—Ç–µ–ª—å"
    elif "–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å" in week_info.lower():
        return "–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å"
    else:
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
def get_schedule_changes():
    url = 'https://mpt.ru/izmeneniya-v-raspisanii/'
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    tables = soup.find_all('div', class_='table-responsive')
    if not tables:
        return "–ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç."
    changes = []
    for table in tables:
        caption = table.find('caption')
        if caption and '–ü50-4-22' in caption.text:
            rows = table.find_all('tr')[1:]
            for row in rows:
                columns = row.find_all('td')
                if len(columns) >= 3:
                    lesson_number = columns[0].text.strip()
                    replace_from = columns[1].text.strip()
                    replace_to = columns[2].text.strip()
                    updated_at = columns[3].text.strip() if len(columns) > 3 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    changes.append(f"–ü–∞—Ä–∞ {lesson_number}: {replace_from} ‚Üí {replace_to} (–û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_at})")
    if not changes:
        return "–ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã –ü50-4-22 –Ω–µ—Ç."
    result = f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã –ü50-4-22:\n\n" + "\n".join(changes)
    return result

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    global CHAT_ID
    CHAT_ID = message.chat.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º CHAT_ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
            [types.KeyboardButton(text='–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏')]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
@dp.message(lambda message: message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def send_schedule(message: types.Message):
    current_week = get_current_week()
    if current_week == "—á–∏—Å–ª–∏—Ç–µ–ª—å":
        schedule = schedule_numerator
    elif current_week == "–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å":
        schedule = schedule_denominator
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é.")
        return
    response = "üìÖ –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
    for day, subjects in schedule.items():
        response += f"\n{day}:\n"
        for i, subject in enumerate(subjects, 1):
            response += f"{i}. {subject}\n"
    await message.answer(response, parse_mode=ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
@dp.message(lambda message: message.text == '–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏')
async def send_changes(message: types.Message):
    changes = get_schedule_changes()
    await message.answer(changes, parse_mode=ParseMode.MARKDOWN)


async def scheduled(wait_for):
    global CHAT_ID
    last_changes = None
    while True:
        await asyncio.sleep(wait_for)
        changes = get_schedule_changes()
        if changes and changes != last_changes:
            last_changes = changes
            if CHAT_ID: 
                await bot.send_message(chat_id=CHAT_ID, text=f"üì¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:\n{changes}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(scheduled(3600)) 
    loop.run_until_complete(dp.start_polling(bot))